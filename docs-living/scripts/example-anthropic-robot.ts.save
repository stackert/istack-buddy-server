#!/usr/bin/env ts-node

import { RobotChatAnthropic } from '../../src/robots/RobotChatAnthropic';
import { TConversationTextMessageEnvelope } from '../../src/robots/types';

/**
 * Test script for RobotChatAnthropic
 *
 * This script creates an instance of RobotChatAnthropic and tests the
 * basic chat methods with various test messages, including tool functionality.
 *
 * Usage: npx ts-node docs-living/scripts/example-anthropic-robot.ts
 */

async function testAnthropicRobot(): Promise<void> {
  console.log('ü§ñ Starting Anthropic Robot Test...');
  console.log('='.repeat(60));

  try {
    // Create an instance of RobotChatAnthropic
    const robot = new RobotChatAnthropic();

    // Log robot information
    console.log(`üîß Robot Name: ${robot.name}`);
    console.log(`üì¶ Robot Version: ${robot.version}`);
    console.log(`üß† LLM Model: ${robot.LLModelName}`);
    console.log(`üè∑Ô∏è  LLM Version: ${robot.LLModelVersion}`);
    console.log(
      `ü™ü Context Window: ${robot.contextWindowSizeInTokens.toLocaleString()} tokens`,
    );
    console.log('');

    // Test messages that should trigger tools
    const testMessages = [
      {
        title: 'Basic Greeting',
        message:
          'Hello Anthropic robot! Can you help me with form troubleshooting?',
        shouldTriggerTools: false,
      },
      {
        title: 'Sumo Logic Query Request',
        message:
          'I need to analyze form submissions for form ID 12345 between timestamps 1640995200000 and 1641081600000. Can you help me query the Sumo Logic data?',
        shouldTriggerTools: true,
      },
      {
        title: 'SSO Auto-fill Issue',
        message:
          "I'm having trouble with SSO auto-fill not working for form 67890 in account 98765. The fields aren't being populated automatically when users log in through SSO.",
        shouldTriggerTools: true,
      },
      {
        title: 'Specific Submission Investigation',
        message:
          'Can you help me trace submission 555777 for form 12345? I need to check the logs from 1640995200000 to 1641081600000.',
        shouldTriggerTools: true,
      },
    ];

    for (let i = 0; i < testMessages.length; i++) {
      const { title, message, shouldTriggerTools } = testMessages[i];

      console.log(`üì§ Test ${i + 1}: ${title}`);
      console.log('‚îÄ'.repeat(50));
      console.log(`Input: "${message}"`);
      console.log(
        `Expected tool usage: ${shouldTriggerTools ? '‚úÖ Yes' : '‚ùå No'}`,
      );
      console.log('');

      // Create test message envelope
      const testMessageEnvelope: TConversationTextMessageEnvelope = {
        messageId: `test-message-${i + 1}`,
        requestOrResponse: 'request',
        envelopePayload: {
          messageId: `msg-${i + 1}`,
          author_role: 'user',
          content: {
            type: 'text/plain',
            payload: message,
          },
          created_at: new Date().toISOString(),
          estimated_token_count: 0,
        },
      };

      const startTime = Date.now();
      const result =
        await robot.acceptMessageImmediateResponse(testMessageEnvelope);
      const duration = Date.now() - startTime;

      console.log('üìã Response:');
      console.log(result.envelopePayload.content.payload);
      console.log('');
      console.log(`‚è±Ô∏è  Processing time: ${duration}ms`);
      console.log(
        `üìä Estimated tokens: ${result.envelopePayload.estimated_token_count}`,
      );
      console.log('‚úÖ Test completed!');
      console.log('');
      console.log('='.repeat(60));
      console.log('');
    }

    // Test streaming with a tool-triggering message
    console.log('üì§ Streaming Test: Testing tool usage with streaming...');
    console.log('‚îÄ'.repeat(50));
    const streamingMessage =
      'Please help me troubleshoot SSO auto-fill for form 11111 in account 22222. Users are reporting that their information is not being pre-populated.';
    console.log(`Input: "${streamingMessage}"`);
    console.log('Streaming output:');

    const streamingEnvelope: TConversationTextMessageEnvelope = {
      messageId: 'streaming-test',
      requestOrResponse: 'request',
      envelopePayload: {
        messageId: 'streaming-msg',
        author_role: 'user',
        content: {
          type: 'text/plain',
          payload: streamingMessage,
        },
        created_at: new Date().toISOString(),
        estimated_token_count: 0,
      },
    };

    const streamStartTime = Date.now();
    await robot.acceptMessageStreamResponse(
      streamingEnvelope,
      (chunk: string) => {
        process.stdout.write(chunk);
      },
    );
    const streamDuration = Date.now() - streamStartTime;

    console.log('\n');
    console.log(`‚è±Ô∏è  Streaming time: ${streamDuration}ms`);
    console.log('‚úÖ Streaming test completed!');
    console.log('');

    // Test token estimation
    console.log('üì§ Token Estimation Test...');
    console.log('‚îÄ'.repeat(50));
    const testTokenMessages = [
      'Query Sumo Logic for form 123',
      'Help with SSO auto-fill configuration for form 456 in account 789',
      'I need to analyze submission data between 1640995200000 and 1641081600000 for troubleshooting integration issues with form submissions',
    ];

    testTokenMessages.forEach((msg, index) => {
      const tokens = robot.estimateTokens(msg);
      const ratio = ((tokens / msg.length) * 100).toFixed(1);
      console.log(
        `Message ${index + 1}: "${msg.substring(0, 50)}${msg.length > 50 ? '...' : ''}"`,
      );
      console.log(
        `  üìè Length: ${msg.length} chars | ü™ô Tokens: ${tokens} | üìä Ratio: ${ratio}%`,
      );
    });
    console.log('‚úÖ Token estimation test completed!');
    console.log('');
  } catch (error) {
    console.error('‚ùå Test failed with error:');
    console.error('‚îÄ'.repeat(50));

    if (error instanceof Error) {
      console.error(`Error name: ${error.name}`);
      console.error(`Error message: ${error.message}`);
      if (error.stack) {
        console.error('Stack trace:');
        console.error(error.stack);
      }
    } else {
      console.error('Unknown error:', error);
    }

    console.error('‚îÄ'.repeat(50));
    process.exit(1);
  }

  console.log('üéâ All Anthropic Robot Tests completed successfully!');
  console.log('='.repeat(60));
}

// Handle uncaught exceptions and rejections
process.on('uncaughtException', (error) => {
  console.error('üí• Uncaught Exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('üí• Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

// Run the test
(async () => {
  await testAnthropicRobot();
})();
