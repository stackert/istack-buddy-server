// Tool definitions for Anthropic API
import Anthropic from '@anthropic-ai/sdk';
import { fsApiClient } from '../api/fsApiClient';
// as Anthropic.Messages.Tool[]

type TAnthropicToolSet = {
  toolDefinitions: Anthropic.Messages.Tool[];
  executeToolCall: (
    toolName: string,
    toolArgs: any,
  ) => string | Promise<string>;
};

/**
 * Handle SSO auto-fill assistance tool
 */
const handleSsoAutofillAssistance = (toolArgs: any): string => {
  const { formId, accountId } = toolArgs;

  return `üîê SSO Auto-fill Configuration Analysis

üìã Form ID: ${formId}
üè¢ Account ID: ${accountId}

üîß SSO Auto-fill Troubleshooting:

**Common Issues to Check:**
‚Ä¢ SSO provider configuration and field mappings
‚Ä¢ Form field IDs matching SSO attribute names
‚Ä¢ Account-level SSO settings and permissions
‚Ä¢ Form-specific SSO protection settings

**Configuration Verification:**
‚Ä¢ Verify SSO provider is properly configured for account ${accountId}
‚Ä¢ Check that form ${formId} has SSO protection enabled
‚Ä¢ Confirm field mapping between SSO attributes and form fields
‚Ä¢ Validate user permissions and group memberships

**Debugging Steps:**
‚Ä¢ Test SSO login flow independently
‚Ä¢ Check browser console for JavaScript errors
‚Ä¢ Verify SAML/OIDC response contains expected attributes
‚Ä¢ Review form field names and auto-fill mappings

üí° **What I can help with:**
‚Ä¢ Analyze specific error messages
‚Ä¢ Guide through configuration verification
‚Ä¢ Help troubleshoot field mapping issues
‚Ä¢ Provide best practices for SSO auto-fill setup`;
};

/**
 * Handle Sumo Logic query tool
 */
const handleSumoLogicQuery = (toolArgs: any): string => {
  const { fromDate, toDate, formId, submissionId } = toolArgs;

  // Build ID section conditionally
  const idSection = [
    formId ? `üìã Form ID: ${formId}` : '',
    submissionId ? `üìÑ Submission ID: ${submissionId}` : '',
  ]
    .filter(Boolean)
    .join('\n');

  // Build analysis section based on what parameters we have
  const analysisSection = submissionId
    ? `‚Ä¢ Submission lifecycle tracking for submission ${submissionId}
‚Ä¢ Integration run logs and status
‚Ä¢ Email send logs related to this submission
‚Ä¢ Error logs and failure points`
    : formId
      ? `‚Ä¢ All submissions for form ${formId} in the specified date range
‚Ä¢ Form performance metrics and submission patterns
‚Ä¢ Integration success/failure rates
‚Ä¢ Common error patterns`
      : `‚Ä¢ General submission activity in the date range
‚Ä¢ System-wide performance metrics
‚Ä¢ Error trend analysis`;

  return `üîç Sumo Logic Query Analysis

üìÖ Date Range: ${fromDate} to ${toDate}
${idSection}

üìä Query Results:
Based on the provided parameters, here's what I would help you analyze:

${analysisSection}

üí° Next Steps:
‚Ä¢ I can help you craft specific Sumo Logic queries
‚Ä¢ Provide query syntax for your specific use case
‚Ä¢ Interpret results and identify patterns`;
};

/**
 * Handle form and related entity overview tool
 */
const handleFormAndRelatedEntityOverview = async (
  toolArgs: any,
): Promise<string> => {
  const { formId, apiKey } = toolArgs;

  try {
    // Set API key if provided
    if (apiKey) {
      fsApiClient.setApiKey(apiKey);
    }

    const result = await fsApiClient.formAndRelatedEntityOverview(formId);

    if (!result.isSuccess || !result.response) {
      return `‚ùå Failed to retrieve form overview for form ${formId}
      
Error: ${result.errorItems?.join(', ') || 'Unknown error'}`;
    }

    const overview = result.response;

    // Format related entities
    const formatEntityList = (
      entities: Array<{ id: string; name: string }>,
      type: string,
    ) => {
      if (entities.length === 0) {
        return `   ‚Ä¢ No ${type} configured`;
      }
      return entities
        .map((entity) => `   ‚Ä¢ ${entity.name} (ID: ${entity.id})`)
        .join('\n');
    };

    return `üìã Form Overview: ${overview.formId}

üîó **Form Details:**
   ‚Ä¢ URL: ${overview.url}
   ‚Ä¢ Version: ${overview.version}
   ‚Ä¢ Timezone: ${overview.timezone}
   ‚Ä¢ Status: ${overview.isActive ? '‚úÖ Active' : '‚ùå Inactive'}
   ‚Ä¢ Encryption: ${overview.encrypted ? 'üîí Enabled' : 'üîì Disabled'}

üìä **Submission Statistics:**
   ‚Ä¢ Total Submissions: ${overview.submissions}
   ‚Ä¢ Submissions Today: ${overview.submissionsToday}
   ‚Ä¢ Last Submission ID: ${overview.lastSubmissionId || 'None'}

‚öôÔ∏è **Form Configuration:**
   ‚Ä¢ Field Count: ${overview.fieldCount}
   ‚Ä¢ One Question at a Time: ${overview.isOneQuestionAtATime ? '‚úÖ Yes' : '‚ùå No'}
   ‚Ä¢ Has Approvers: ${overview.hasApprovers ? '‚úÖ Yes' : '‚ùå No'}
   ‚Ä¢ Workflow Form: ${overview.isWorkflowForm ? '‚úÖ Yes' : '‚ùå No'}${overview.isWorkflowPublished !== undefined ? `\n   ‚Ä¢ Workflow Published: ${overview.isWorkflowPublished ? '‚úÖ Yes' : '‚ùå No'}` : ''}

üîó **Submit Actions (Webhooks):** ${overview.submitActions.length}
${formatEntityList(overview.submitActions, 'webhooks')}

üìß **Notification Emails:** ${overview.notificationEmails.length}
${formatEntityList(overview.notificationEmails, 'notification emails')}

‚úÖ **Confirmation Emails:** ${overview.confirmationEmails.length}
${formatEntityList(overview.confirmationEmails, 'confirmation emails')}

üí° This overview provides a comprehensive view of the form's configuration and related entities. Let me know if you need more details about any specific aspect!`;
  } catch (error) {
    return `‚ùå Error retrieving form overview: ${error instanceof Error ? error.message : 'Unknown error'}`;
  }
};

/**
 * Execute tool calls based on tool name and arguments
 */
const executeToolCall = (
  toolName: string,
  toolArgs: any,
): string | Promise<string> => {
  switch (toolName) {
    case 'sumo_logic_query':
      return handleSumoLogicQuery(toolArgs);
    case 'sso_autofill_assistance':
      return handleSsoAutofillAssistance(toolArgs);
    case 'form_and_related_entity_overview':
      return handleFormAndRelatedEntityOverview(toolArgs);
    default:
      return `‚ùå Unknown tool: ${toolName}. Available tools: sumo_logic_query, sso_autofill_assistance, form_and_related_entity_overview`;
  }
};

const RobotChatAnthropicToolSet: TAnthropicToolSet = {
  toolDefinitions: [
    {
      name: 'sumo_logic_query',
      description:
        'Assist users with Sumo Logic queries to analyze form submissions, logs, and related data. Helps trace submission lifecycle and troubleshoot issues.',
      input_schema: {
        type: 'object',
        properties: {
          fromDate: {
            type: 'string',
            description:
              'Start date for the query in numeric string format (e.g., "1640995200000" for Unix timestamp)',
          },
          toDate: {
            type: 'string',
            description:
              'End date for the query in numeric string format (e.g., "1641081600000" for Unix timestamp)',
          },
          formId: {
            type: 'string',
            description:
              'Form ID to query data for, in numeric string format (e.g., "12345")',
          },
          submissionId: {
            type: 'string',
            description:
              'Specific submission ID to analyze, in numeric string format (e.g., "67890")',
          },
        },
        required: ['fromDate', 'toDate'],
      },
    },
    {
      name: 'sso_autofill_assistance',
      description:
        'Assist users with form SSO auto-fill questions and troubleshooting. Helps diagnose SSO configuration and auto-fill mapping issues.',
      input_schema: {
        type: 'object',
        properties: {
          formId: {
            type: 'string',
            description:
              'Form ID to analyze SSO auto-fill configuration for, in numeric string format (e.g., "12345")',
          },
          accountId: {
            type: 'string',
            description:
              'Account ID associated with the SSO configuration, in numeric string format (e.g., "98765")',
          },
        },
        required: ['formId', 'accountId'],
      },
    },
    {
      name: 'form_and_related_entity_overview',
      description:
        'Get comprehensive overview of a form including configuration, statistics, and all related entities (webhooks, notifications, confirmations). Provides detailed information about form setup and current status.',
      input_schema: {
        type: 'object',
        properties: {
          formId: {
            type: 'string',
            description:
              'Form ID to get overview for, in numeric string format (e.g., "12345")',
          },
          apiKey: {
            type: 'string',
            description:
              'Optional Formstack API key if different from default. Only provide if user specifically mentions an API key.',
          },
        },
        required: ['formId'],
      },
    },
  ],
  executeToolCall: executeToolCall,
};

export { RobotChatAnthropicToolSet };
