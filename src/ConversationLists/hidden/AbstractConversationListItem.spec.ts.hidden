import { AbstractConversationListItem } from './AbstractConversationListItem.ts.hidden';
import type { TConversationItemAuthorRoles } from '../types';

describe('AbstractConversationListItem', () => {
  const testDate = new Date('2024-01-01T00:00:00.000Z');
  const testContent = { type: 'text/plain' as const, payload: 'Test message' };

  beforeEach(() => {
    jest.useFakeTimers();
    jest.setSystemTime(testDate);
  });

  afterEach(() => {
    jest.useRealTimers();
  });

  describe('constructor', () => {
    it('should create an instance with all required properties', () => {
      const item = new AbstractConversationListItem(
        'msg-1',
        'user-1',
        'cx-customer',
        testContent,
        testDate,
        testDate,
        50,
        ['cx-customer', 'cx-agent'],
      );

      expect(item.id).toBe('msg-1');
      expect(item.authorId).toBe('user-1');
      expect(item.authorRole).toBe('cx-customer');
      expect(item.content).toEqual(testContent);
      expect(item.createdAt).toBe(testDate);
      expect(item.updatedAt).toBe(testDate);
      expect(item.estimatedTokenCount).toBe(50);
      expect(item.roleVisibilities).toEqual(['cx-customer', 'cx-agent']);
    });
  });

  describe('getDefaultVisibilities', () => {
    it('should return correct visibilities for cx-customer role', () => {
      const visibilities =
        AbstractConversationListItem.getDefaultVisibilities('cx-customer');
      expect(visibilities).toEqual([
        'cx-customer',
        'cx-agent',
        'cx-supervisor',
        'conversation-admin',
      ]);
    });

    it('should return correct visibilities for cx-agent role', () => {
      const visibilities =
        AbstractConversationListItem.getDefaultVisibilities('cx-agent');
      expect(visibilities).toEqual([
        'cx-customer',
        'cx-agent',
        'cx-supervisor',
        'conversation-admin',
      ]);
    });

    it('should return correct visibilities for cx-supervisor role', () => {
      const visibilities =
        AbstractConversationListItem.getDefaultVisibilities('cx-supervisor');
      expect(visibilities).toEqual(['cx-supervisor', 'conversation-admin']);
    });

    it('should return correct visibilities for robot role', () => {
      const visibilities =
        AbstractConversationListItem.getDefaultVisibilities('robot');
      expect(visibilities).toEqual([
        'cx-agent',
        'cx-supervisor',
        'conversation-admin',
      ]);
    });

    it('should return correct visibilities for cx-robot role', () => {
      const visibilities =
        AbstractConversationListItem.getDefaultVisibilities('cx-robot');
      expect(visibilities).toEqual([
        'cx-customer',
        'cx-agent',
        'cx-supervisor',
        'conversation-admin',
      ]);
    });

    it('should return correct visibilities for conversation-admin role', () => {
      const visibilities =
        AbstractConversationListItem.getDefaultVisibilities(
          'conversation-admin',
        );
      expect(visibilities).toEqual([
        'cx-customer',
        'cx-agent',
        'cx-supervisor',
        'conversation-admin',
      ]);
    });

    it('should return correct visibilities for tool role', () => {
      const visibilities =
        AbstractConversationListItem.getDefaultVisibilities('tool');
      expect(visibilities).toEqual([
        'cx-agent',
        'cx-supervisor',
        'conversation-admin',
      ]);
    });

    it('should return correct visibilities for admin role', () => {
      const visibilities =
        AbstractConversationListItem.getDefaultVisibilities('admin');
      expect(visibilities).toEqual([
        'cx-customer',
        'cx-agent',
        'cx-supervisor',
        'conversation-admin',
      ]);
    });

    it('should return default visibilities for unknown role', () => {
      const visibilities = AbstractConversationListItem.getDefaultVisibilities(
        'unknown' as any,
      );
      expect(visibilities).toEqual(['cx-agent', 'conversation-admin']);
    });
  });

  describe('getSharedRobotVisibilities', () => {
    it('should return visibilities for shared robot messages', () => {
      const visibilities =
        AbstractConversationListItem.getSharedRobotVisibilities();
      expect(visibilities).toEqual([
        'cx-customer',
        'cx-agent',
        'cx-supervisor',
        'conversation-admin',
      ]);
    });
  });

  describe('getPrivateAgentSupervisorVisibilities', () => {
    it('should return visibilities for private agent-supervisor communication', () => {
      const visibilities =
        AbstractConversationListItem.getPrivateAgentSupervisorVisibilities();
      expect(visibilities).toEqual([
        'cx-agent',
        'cx-supervisor',
        'conversation-admin',
      ]);
    });
  });

  describe('isVisibleToRole', () => {
    let item: AbstractConversationListItem;

    beforeEach(() => {
      item = new AbstractConversationListItem(
        'msg-1',
        'user-1',
        'cx-customer',
        testContent,
        testDate,
        testDate,
        50,
        ['cx-customer', 'cx-agent'],
      );
    });

    it('should return true for roles in visibility list', () => {
      expect(item.isVisibleToRole('cx-customer')).toBe(true);
      expect(item.isVisibleToRole('cx-agent')).toBe(true);
    });

    it('should return false for roles not in visibility list', () => {
      expect(item.isVisibleToRole('cx-supervisor')).toBe(false);
      expect(item.isVisibleToRole('robot')).toBe(false);
    });
  });

  describe('canBeProcessedByAI', () => {
    it('should return false for robot messages', () => {
      const robotItem = new AbstractConversationListItem(
        'msg-1',
        'robot-1',
        'robot',
        testContent,
        testDate,
        testDate,
        50,
        ['cx-agent'],
      );
      expect(robotItem.canBeProcessedByAI()).toBe(false);
    });

    it('should return false for cx-supervisor messages without robot visibility', () => {
      const supervisorItem = new AbstractConversationListItem(
        'msg-1',
        'sup-1',
        'cx-supervisor',
        testContent,
        testDate,
        testDate,
        50,
        ['cx-supervisor'],
      );
      expect(supervisorItem.canBeProcessedByAI()).toBe(false);
    });

    it('should return true for cx-supervisor messages with robot visibility', () => {
      const supervisorItem = new AbstractConversationListItem(
        'msg-1',
        'sup-1',
        'cx-supervisor',
        testContent,
        testDate,
        testDate,
        50,
        ['cx-supervisor', 'robot'],
      );
      expect(supervisorItem.canBeProcessedByAI()).toBe(true);
    });

    it('should return true for customer messages', () => {
      const customerItem = new AbstractConversationListItem(
        'msg-1',
        'cust-1',
        'cx-customer',
        testContent,
        testDate,
        testDate,
        50,
        ['cx-customer'],
      );
      expect(customerItem.canBeProcessedByAI()).toBe(true);
    });

    it('should return true for agent messages', () => {
      const agentItem = new AbstractConversationListItem(
        'msg-1',
        'agent-1',
        'cx-agent',
        testContent,
        testDate,
        testDate,
        50,
        ['cx-agent'],
      );
      expect(agentItem.canBeProcessedByAI()).toBe(true);
    });
  });
});
